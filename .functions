#Open Project
function opr() {
	if [[ -n "$1" ]]
		then
			cd "${dirProjects}"/$1
		else
			cd "${dirProjects}"
	fi
}

#Setup Project
function stpr() {
	if [[ -n "$1" ]]
		then
			echo "Setting Up Project $1"
			opr
			if [[ ! -d $1 ]]
				then
					mkdir $1					
			fi
			cd $1
			cp -R "${dirProjectWeb}"/project .
			cp "${dirProjectWeb}"/build.xml "${dirProjectWeb}"/config.rb .
			mkdir ./sources ./sources/"project meta images" ./sources/"project sources"
			find . \( -name "txex.*.*" -o -name "txdemo.*.*" -o -name ".DS_Store" \) -type f -delete
			find ./project -type d -empty -delete
			perl -pi -w -e "s/TemplateX/"$1"/g;" ./build.xml
		else
			echo "Project Name Missing"
	fi
}

#Setup App Project
function stap() {
	if [[ -n "$1" ]]
		then
			echo "Setting Up App Project $1"
			opr
			if [[ ! -d $1 ]]
				then
					mkdir $1					
			fi
			cd $1
			cp -R "${dirProjectApp}"/project .
			cp "${dirProjectApp}"/build.xml "${dirProjectApp}"/config.rb .
			mkdir ./sources ./sources/"project meta images" ./sources/"project sources"
			find . \( -name "txex.*.*" -o -name "txdemo.*.*" -o -name ".DS_Store" \) -type f -delete
			find ./project -type d -empty -delete
			perl -pi -w -e "s/AppX/"$1"/g;" ./build.xml
			if [[ -n "$2" ]]
				then
					perl -pi -w -e "s/appx/"$2"/g;" ./build.xml
				else
					perl -pi -w -e "s/appx/"$1"/g;" ./build.xml
			fi
		else
			echo "Project Name Missing"
	fi
}

#Watch Current Project with Sass
function swpr() {
	if [[ -d project ]]
		then
			sass --compass --sourcemap --watch project/res/sass.txsrc:project/res/css.txsrc
		else
			echo "Nothing to Watch"
	fi
}

#Build Current Project with ANT
function bpr() {
	shareFlag=false
	while getopts ":s" opt; do
		case "${opt}" in
			s)
				shareFlag=true
				;;
			\?)
				echo "Invalid Parameters"
				;;
		esac
	done
	OPTIND=1
	if $shareFlag
		then
			ant -propertyfile $buildProperties -Dbuild.share=share
		else
			ant -propertyfile $buildProperties
	fi
}

#Start Local HTTP Server and Serve Current Project
function server() {
	port=8000
	dir="project"
	while getopts ":bp:" opt; do
		case "${opt}" in
			b)
				dir="build"
				;;
			p)
				port=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				;;
		esac
	done
	OPTIND=1
	if [[ -d $dir ]]
		then
			cd $dir
			open "http://localhost:${port}/"
			python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
			cd ..
		else
			echo "Nothing to Serve"
	fi
}

#Start All Browsers (Current Versions or Latest Nightly Builds) with Custom URL or http://localhost:8000 by Default
function browsers() {
	nightlyFlag=false
	url="http://localhost:8000/"
	while getopts ":nu:" opt; do
		case "${opt}" in
			n)
				nightlyFlag=true
				;;
			u)
				url=$OPTARG
				;;
			\?)
				echo "Invalid Arguments"
				;;
		esac
	done
	OPTIND=1
	if $nightlyFlag
		then
			open -a Google\ Chrome\ Canary $url
			open -a Opera\ Next $url
			open -a WebKit $url
			open -a FirefoxNightly $url
		else
			open -a Google\ Chrome $url
			open -a Opera $url
			open -a Safari $url
			open -a Firefox $url
	fi
}