#Open Project
function propn() {
	if [[ -n "$1" ]]
		then
			if [ "$1" == "-s" ]
				then
					if [[ -n "$2" ]]
						then
							cd $dirProjects/$2
							open -a "Sublime Text" $2.sublime-project
						else
							cd $dirProjects
					fi
				else
					cd $dirProjects/$1
					if [ "$2" == "-s" ]
						then
							open -a "Sublime Text" $1.sublime-project
					fi
			fi
		else
			cd $dirProjects
	fi
}

#Open Current Project in Sublime Text
function sbl() {
	open -a "Sublime Text" *.sublime-project
}

#Setup Web Project
function prstp() {
	if [[ -n "$1" ]]
		then
			remoteFlag=false
			if [ "$1" == "-r" ]
				then
					remoteFlag=true
					if [[ -n "$2" ]]
						then
							projectName=$2
						else
							echo "Please Enter Project Name"
							exit
					fi
				else
					projectName=$1
					if [ "$2" == "-r" ]
						then
							remoteFlag=true
					fi
			fi
			echo "Setting Up Project $projectName"
			packageName="$(tr [A-Z] [a-z] <<< "$projectName")"
			propn
			if [[ ! -d $projectName ]]
				then
					mkdir $projectName
			fi
			if $remoteFlag
				then
					git clone $remoteProjectWeb $projectName
					cd $projectName
					rm -rf .git
					rm *.md
					mv TemplateX.sublime-project $projectName.sublime-project
				else
					cd $projectName
					cp -R $dirProjectWeb/{dev,meta} .
					cp $dirProjectWeb/{gruntfile.js,package.json,backstop.json,.*.yml,.*rc,.editorconfig,.gitignore} .
					cp $dirProjectWeb/TemplateX.sublime-project ./$projectName.sublime-project
			fi
			mkdir ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			find ./meta \( -name "*.ico" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -type f -delete
			perl -pi -w -e "s/TemplateX/"$projectName"/g;" ./gruntfile.js
			perl -pi -w -e "s/TemplateX/"$projectName"/g;" ./package.json
			perl -pi -w -e "s/TemplateX/"$projectName"/g;" ./backstop.json
			perl -pi -w -e "s/TemplateX/"$projectName"/g;" ./$projectName.sublime-project
			perl -pi -w -e "s/templatex/"$packageName"/g;" ./package.json
			while true; do
				read -p "Do You Want to Install npm Dependencies (y/n)? " ynnpm
				case $ynnpm in
						[Yy]*)
							npm cache clear
							npm i
							break
							;;
						[Nn]*)
							break
							;;
						*)
							echo "Please Answer (y)es or (n)o"
							;;
				esac
			done
			OPTIND=1
		else
			echo "Please Enter Project Name"
	fi
}

#Setup Good-Seller Template Project
function prgsstp() {
	if [[ -n "$1" ]]
		then
			echo "Setting Up Good-Seller Template Project template$1"
			propn
			if [[ ! -d GoodSellerTemplates/template$1 ]]
				then
					mkdir GoodSellerTemplates/template$1
			fi
			cd $dirProjects/GoodSellerTemplates/template$1
			cp -R $dirProjects/GoodSellerTemplates/templateBase/dev .
			cp $dirProjects/GoodSellerTemplates/templateBase/gruntfile.js .
			cp $dirProjects/GoodSellerTemplates/templateBase/GStemplate.sublime-project ./GStemplate$1.sublime-project
			mkdir ./meta ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			perl -pi -w -e "s/GoodSellerTemplates/"GoodSellerTemplate$1"/g;" ./gruntfile.js
			perl -pi -w -e "s/GoodSellerTemplates/"GoodSellerTemplate$1"/g;" ./GStemplate$1.sublime-project
			cd ..
		else
			echo "Please Enter Template Number"
	fi
}

#Setup App Project
function apstp() {
	if [[ -n "$1" ]]
		then
			remoteFlag=false
			if [ "$1" == "-r" ]
				then
					remoteFlag=true
					if [[ -n "$2" ]]
						then
							projectName=$2
							packageName=$3
						else
							echo "Please Enter Project Name"
							exit
					fi
				else
					projectName=$1
					if [ "$2" == "-r" ]
						then
							remoteFlag=true
						else
							packageName=$2
							if [ "$3" == "-r" ]
								then
									remoteFlag=true
							fi
					fi
			fi
			echo "Setting Up App Project $projectName"
			if [ "$packageName" == "" ]
				then
					packageName="$(tr [A-Z] [a-z] <<< "$projectName")"
			fi
			propn
			if [[ ! -d $projectName ]]
				then
					mkdir $projectName
			fi
			if $remoteFlag
				then
					git clone $remoteProjectApp $projectName
					cd $projectName
					rm -rf .git
					rm *.md
					mv AppX.sublime-project $projectName.sublime-project
				else
					cd $projectName
					cp -R $dirProjectApp/{dev,meta} .
					cp $dirProjectApp/{gruntfile.js,package.json,backstop.json,.*.yml,.*rc,.editorconfig,.gitignore} .
					cp $dirProjectApp/AppX.sublime-project ./$projectName.sublime-project
			fi
			mkdir ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			find ./meta \( -name "*.ico" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -type f -delete
			perl -pi -w -e "s/AppX/"$projectName"/g;" ./gruntfile.js
			perl -pi -w -e "s/AppX/"$projectName"/g;" ./package.json
			perl -pi -w -e "s/AppX/"$projectName"/g;" ./backstop.json
			perl -pi -w -e "s/AppX/"$projectName"/g;" ./$projectName.sublime-project
			perl -pi -w -e "s/appx/"$packageName"/g;" ./gruntfile.js
			perl -pi -w -e "s/appx/"$packageName"/g;" ./package.json
			while true; do
				read -p "Do You Want to Install npm Dependencies (y/n)? " ynnpm
				case $ynnpm in
					[Yy]*)
						npm cache clear
						npm i
						break
						;;
					[Nn]*)
						break
						;;
					*)
						echo "Please Answer (y)es or (n)o"
						;;
				esac
			done
			OPTIND=1
		else
			echo "Please Enter Project and JavaScript Package Names"
	fi
}

#Setup Mail Project
function mlstp() {
	if [[ -n "$1" ]]
		then
			remoteFlag=false
			if [ "$1" == "-r" ]
				then
					remoteFlag=true
					if [[ -n "$2" ]]
						then
							projectName=$2
						else
							echo "Please Enter Project Name"
							exit
					fi
				else
					projectName=$1
					if [ "$2" == "-r" ]
						then
							remoteFlag=true
					fi
			fi
			echo "Setting Up Mail Template Project $projectName"
			propn
			if [[ ! -d $projectName ]]
				then
					mkdir $projectName
			fi
			if $remoteFlag
				then
					git clone $remoteProjectMail $projectName
					cd $projectName
					rm -rf .git
					rm *.md
					mv MailX.sublime-project $projectName.sublime-project
				else
					cd $projectName
					cp -R $dirProjectMail/dev .
					cp $dirProjectMail/{gruntfile.js,package.json,backstop.json,.*.yml,.*rc,.editorconfig,.gitignore} .
					cp $dirProjectMail/MailX.sublime-project ./$projectName.sublime-project
			fi
			mkdir ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			perl -pi -w -e "s/MailX/"$projectName"/g;" ./gruntfile.js
			perl -pi -w -e "s/MailX/"$projectName"/g;" ./$projectName.sublime-project
			while true; do
				read -p "Do You Want to Install npm Dependencies (y/n)? " ynnpm
				case $ynnpm in
					[Yy]*)
						npm cache clear
						npm i
						break
						;;
					[Nn]*)
						break
						;;
					*)
						echo "Please Answer (y)es or (n)o"
						;;
				esac
			done
			OPTIND=1
		else
			echo "Please Enter Project Name"
	fi
}

#Watch Current Project with Sass
function prsass() {
	if [[ -d dev ]]
		then
			compass=false
			while getopts ":c" opt; do
				case $opt in
					c)
						compass=true
						;;
					\?)
						echo "Invalid Parameters"
						exit
						;;
				esac
			done
			OPTIND=1
			if $compass
				then
					sass --compass --sourcemap --style expanded --watch dev/res/sass-dev:dev/res/css-dev
				else
					sass --sourcemap --style expanded --watch dev/res/sass-dev:dev/res/css-dev
			fi
		else
			echo "Nothing to Watch / Update Project Structure"
	fi
}

#Watch Current Project with GruntJS watch-project Task
function prwtch() {
	if [[ -d dev ]]
		then
			grunt watch-project
		else
			echo "Nothing to Watch"
	fi
}

#Watch Current Project with GruntJS watch-project Task
function prgswtch() {
	template="Base"
	while getopts ":t:" opt; do
		case $opt in
			t)
				template=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d template$template/dev ]]
		then
			grunt watch-project --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
		else
			echo "Nothing to Watch"
	fi
}

#Build Current Project using GruntJS by Default or Apache ANT
function prbld() {
	criticalFlag=false
	builder="grunt"
	while getopts ":ca" opt; do
		case $opt in
			c)
				criticalFlag=true
				;;
			a)
				builder="ant"
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [ "$builder" == "ant" ]
		then
			ant -propertyfile $buildProperties
		else
			if $criticalFlag
				then
					grunt build-critical
				else
					grunt build
			fi
	fi
	find ./build -type d -empty -delete
}

#Build Current Good-Seller Template Project using GruntJS by Default or Apache ANT
function prgsbld() {
	criticalFlag=false
	template="Base"
	while getopts ":ct:" opt; do
		case $opt in
			c)
				criticalFlag=true
				;;
			t)
				template=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if $criticalFlag
		then
			grunt build-critical --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
		else
			grunt build --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
	fi
	find template$template/build -type d -empty -delete
	find template$template/template -type d -empty -delete
}

#Start Local HTTP Server and Serve Current Project (/dev Directory By Default or Some Other if Specified)
function server() {
	port=8000
	dir="build"
	while getopts ":d:p:" opt; do
		case $opt in
			d)
				dir=$OPTARG
				;;
			p)
				port=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d $dir ]]
		then
			cd $dir
			open http://localhost:$port/
			python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' $port
			cd ..
		else
			echo "Nothing to Serve / Missing Directory"
	fi
}

#Start All Browsers (Current Stable Releases or Nightly Builds) With an Empty Tab or Go To Specified URL (http://localhost:8000 by Default)
function browsers() {
	nightlyFlag=false
	url=http://localhost:8000/
	emptyFlag=false
	while getopts ":neu:" opt; do
		case $opt in
			n)
				nightlyFlag=true
				;;
			e)
				emptyFlag=true
				;;
			u)
				url=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if $emptyFlag
		then
			if $nightlyFlag
				then
					open -a "Google Chrome Canary"
					open -a "Opera Next"
					open -a WebKit
					open -a FirefoxNightly
				else
					open -a "Google Chrome"
					open -a Opera
					open -a Safari
					open -a Firefox
			fi
		else
			if $nightlyFlag
				then
					open -a "Google Chrome Canary" $url
					open -a "Opera Next" $url
					open -a WebKit $url
					open -a FirefoxNightly $url
				else
					open -a "Google Chrome" $url
					open -a Opera $url
					open -a Safari $url
					open -a Firefox $url
			fi
	fi
}

#Copy dotfiles to the Root Directory
function dsync() {
	cp $dirProjectDot/{.aliases,.functions,.prompt} ~/
	. ~/.bashrc
}
