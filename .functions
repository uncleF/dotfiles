#Create New Directory and Enter it

function mdc() {
	mkdir -p "$@" && cd "$@"
}



#Open Project

function propn() {
	if [[ -n "$1" ]]
		then
			if [ "$1" == "-s" ]
				then
					if [[ -n "$2" ]]
						then
							cd $dirProjects/$2
							open -a "Sublime Text" $2.sublime-project
						else
							cd $dirProjects
					fi
				else
					cd $dirProjects/$1
					if [ "$2" == "-s" ]
						then
							open -a "Sublime Text" $1.sublime-project
					fi
			fi
		else
			cd $dirProjects
	fi
}



#Open Current Project in Sublime Text

function sbl() {
	open -a "Sublime Text" *.sublime-project
}



#Setup Utilities

function uprcopy() {
	mkdir $1
	cd $1
	cp -R $2/{dev,tests} ./
	cp $2/{gruntfile.js,package.json,backstop.json,reminders.json,.*.yml,.*rc,.editorconfig,.gitattributes,.gitignore} ./
	cp $2/$3.sublime-project ./$1.sublime-project	
}

function uprremote() {
	git clone $2 $1
	cd $1
	rm -rf .git
	rm ./*.md
	mv ./$3.sublime-project ./$1.sublime-project	
}

function uprcleanup() {
	find ./ -name ".DS_Store" -type f -delete
	find ./dev -type d -empty -delete
}

function uprreplace() {
	perl -pi -w -e "s/$2/"$1"/g;" ./gruntfile.js
	perl -pi -w -e "s/$2/"$1"/g;" ./package.json
	perl -pi -w -e "s/$2/"$1"/g;" ./backstop.json
	perl -pi -w -e "s/$2/"$1"/g;" ./$1.sublime-project
	perl -pi -w -e "s/$4/"$3"/g;" ./package.json
}

function uprnpm() {
	while true; do
		read -p "Do You Want to Install npm Dependencies (y/n)? " ynnpm
		case $ynnpm in
				[Yy]*)
					npm cache clear
					npm update --save
					npm update --save-dev
					break
					;;
				[Nn]*)
					break
					;;
				*)
					echo "Please Answer (y)es or (n)o"
					;;
		esac
	done
	OPTIND=1
}



#Setup Web Project

function prstp() {
	if [[ -n "$1" ]]
		then
			remoteFlag=false
			if [ "$1" == "-r" ]
				then
					remoteFlag=true
					if [[ -n "$2" ]]
						then
							projectName=$2
						else
							echo "Please Enter Project Name"
							exit
					fi
				else
					projectName=$1
					if [ "$2" == "-r" ]
						then
							remoteFlag=true
					fi
			fi
			echo "Setting Up Project $projectName"
			packageName="$(tr [A-Z] [a-z] <<< "$projectName")"
			propn
			if $remoteFlag
				then
					if hash git 2>/dev/null
						then
							uprremote $projectName $remoteProjectWeb TemplateX
							rm -rf meta
						else
							echo "Git is not available"
							exit
					fi
				else
					uprcopy $projectName $dirProjectWeb TemplateX
					cp -R $dirProjectWeb/dev ./
			fi
			uprcleanup
			mkdir ./design ./sources ./meta
			uprreplace $projectName TemplateX $packageName templatex
			uprnpm
		else
			echo "Please Enter Project Name"
	fi
}



#Setup WebApp Project

function apstp() {
	if [[ -n "$1" ]]
		then
			remoteFlag=false
			if [ "$1" == "-r" ]
				then
					remoteFlag=true
					if [[ -n "$2" ]]
						then
							projectName=$2
							packageName=$3
						else
							echo "Please Enter Project Name"
							exit
					fi
				else
					projectName=$1
					if [ "$2" == "-r" ]
						then
							remoteFlag=true
						else
							packageName=$2
							if [ "$3" == "-r" ]
								then
									remoteFlag=true
							fi
					fi
			fi
			echo "Setting Up App Project $projectName"
			if [ "$packageName" == "" ]
				then
					packageName="$(tr [A-Z] [a-z] <<< "$projectName")"
			fi
			propn
			if $remoteFlag
				then
					if hash git 2>/dev/null
						then
							uprremote $projectName $remoteProjectApp AppX
						else
							echo "Git is not available"
							exit
					fi
				else
					uprcopy $projectName $dirProjectApp AppX
					cp -R $dirProjectApp/{dev,meta} ./
			fi
			uprcleanup
			mkdir ./design ./sources
			find ./meta \( -name "*.ico" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -type f -delete
			uprreplace $projectName AppX $packageName appx
			perl -pi -w -e "s/appx/"$packageName"/g;" ./gruntfile.js
			uprnpm
		else
			echo "Please Enter Project and JavaScript Package Names"
	fi
}



#Setup Mail Template Project

function mlstp() {
	if [[ -n "$1" ]]
		then
			remoteFlag=false
			if [ "$1" == "-r" ]
				then
					remoteFlag=true
					if [[ -n "$2" ]]
						then
							projectName=$2
						else
							echo "Please Enter Project Name"
							exit
					fi
				else
					projectName=$1
					if [ "$2" == "-r" ]
						then
							remoteFlag=true
					fi
			fi
			echo "Setting Up Mail Template Project $projectName"
			propn
			if $remoteFlag
				then
					if hash git 2>/dev/null
						then
							uprremote $projectName $remoteProjectMail MailX
						else
							echo "Git is not available"
							exit
					fi
				else
					uprcopy $projectName $dirProjectMail MailX
			fi
			uprcleanup
			mkdir ./design ./sources
			perl -pi -w -e "s/MailX/"$projectName"/g;" ./gruntfile.js
			perl -pi -w -e "s/MailX/"$projectName"/g;" ./backstop.json
			perl -pi -w -e "s/MailX/"$projectName"/g;" ./$projectName.sublime-project
			uprnpm
		else
			echo "Please Enter Project Name"
	fi
}



#Setup Good-Seller Template Project

function prgsstp() {
	if [[ -n "$1" ]]
		template=$1
		then
			echo "Setting Up Good-Seller Template Project template$1"
			propn
			mkdir GoodSellerTemplates/template$template
			cd $dirProjects/GoodSellerTemplates/template$template
			cp -R $dirProjects/GoodSellerTemplates/templateBase/dev .
			cp $dirProjects/GoodSellerTemplates/templateBase/gruntfile.js .
			cp $dirProjects/GoodSellerTemplates/templateBase/GStemplate.sublime-project ./GStemplate$template.sublime-project
			mkdir ./meta ./design ./sources
			find ./ -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			perl -pi -w -e "s/GoodSellerTemplates/"GoodSellerTemplate$template"/g;" ./gruntfile.js
			perl -pi -w -e "s/GoodSellerTemplates/"GoodSellerTemplate$template"/g;" ./GStemplate$template.sublime-project
			cd ..
		else
			echo "Please Enter Template Number"
	fi
}



#Watch Current Project with Sass

function prsass() {
	if [[ -d dev ]]
		then
			compass=false
			while getopts ":c" opt; do
				case $opt in
					c)
						compass=true
						;;
					\?)
						echo "Invalid Parameters"
						exit
						;;
				esac
			done
			OPTIND=1
			if $compass
				then
					sass --compass --sourcemap --style expanded --watch dev/res/sass-dev:dev/res/css-dev
				else
					sass --sourcemap --style expanded --watch dev/res/sass-dev:dev/res/css-dev
			fi
		else
			echo "Nothing to Watch / Update Project Structure"
	fi
}



#Watch Current Project with GruntJS watch-project Task

function prwtch() {
	if [[ -d dev ]]
		then
			grunt watch-project
		else
			echo "Nothing to Watch"
	fi
}



#Watch Current Good-Seller Template Project with GruntJS watch-project Task

function prgswtch() {
	template="Base"
	while getopts ":t:" opt; do
		case $opt in
			t)
				template=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d template$template/dev ]]
		then
			grunt watch-project --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
		else
			echo "Nothing to Watch"
	fi
}



#Build Current Project using GruntJS by Default or Apache ANT

function prbld() {
	builder="grunt"
	criticalFlag=false
	legacy=false
	while getopts ":cal" opt; do
		case $opt in
			c)
				criticalFlag=true
				;;
			a)
				builder="ant"
				;;
			l)
				legacy=true
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [ "$builder" == "ant" ]
		then
			ant -propertyfile $buildProperties
		else
			if $criticalFlag
				then
					grunt build-critical
				else
					grunt build
			fi
	fi
	if "$legacy"
		then
			find ./build -type d -empty -delete
	fi
}
 


#Build Current Good-Seller Template Project using GruntJS by Default or Apache ANT

function prgsbld() {
	criticalFlag=false
	template="Base"
	while getopts ":ct:" opt; do
		case $opt in
			c)
				criticalFlag=true
				;;
			t)
				template=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if $criticalFlag
		then
			grunt build-critical --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
		else
			grunt build --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
	fi
	find template$template/build -type d -empty -delete
	find template$template/template -type d -empty -delete
}



#Commit and Push Project Changes

function prcmt() {
	message="Project Update"
	remote="origin"
	while getopts ":m:r:" opt; do
		case $opt in
			m)
				message=$OPTARG
				;;
			r)
				remote=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	git add -A && git commit -a -m "$message" && git push $remote
}



# Update Project Settings

function prupd() {
	project=$dirProjectWeb
	while getopts ":ma" opt; do
		case $opt in
			a)
				project=$dirProjectApp
				;;
			m)
				project=$dirProjectMail
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d dev ]]
		then
			cp $project/{.*rc,.*.yml,.editorconfig} ./
		else
			echo "This is Not a Project Root"
	fi
}



#Start Local HTTP Server and Serve Current Project (/build Directory By Default or Some Other if Specified)

function server() {
	directory="build"
	port=8000
	while getopts ":d:p:" opt; do
		case $opt in
			d)
				directory=$OPTARG
				;;
			p)
				port=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d $directory ]]
		then
			cd $directory
			open http://localhost:$port/
			python -m SimpleHTTPServer $port
			cd ..
		else
			echo "Nothing to Serve / Missing Directory"
	fi
}



#Start All Browsers (Current Stable Releases or Nightly Builds) With an Empty Tab or Go To Specified URL (http://localhost:8000 by Default)

function browsers() {
	nightlyFlag=false
	emptyFlag=false
	url=http://localhost:8000/
	while getopts ":neu:" opt; do
		case $opt in
			n)
				nightlyFlag=true
				;;
			e)
				emptyFlag=true
				;;
			u)
				url=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if $emptyFlag
		then
			if $nightlyFlag
				then
					open -a "Google Chrome Canary"
					open -a "Opera Next"
					open -a WebKit
					open -a FirefoxNightly
				else
					open -a "Google Chrome"
					open -a Opera
					open -a Safari
					open -a Firefox
			fi
		else
			if $nightlyFlag
				then
					open -a "Google Chrome Canary" $url
					open -a "Opera Next" $url
					open -a WebKit $url
					open -a FirefoxNightly $url
				else
					open -a "Google Chrome" $url
					open -a Opera $url
					open -a Safari $url
					open -a Firefox $url
			fi
	fi
}



#Copy dotfiles to the Root Directory

function dsync() {
	cp $dirProjectDot/{.aliases,.environment,.functions,.prompt} ~/
	. ~/.bashrc
}



#Check Remote Repos

function rpscheck() {
	propn
	white=$(tput setaf 7)
	yellow=$(tput setaf 3)
	for d in $(find $dirProjects -name "*.git" -type d -maxdepth 2); do
		cd $d/..
		printf "${yellow}${PWD##*/}${white}\n"
		git fetch origin --dry-run
	done
}
