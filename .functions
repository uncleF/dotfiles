#Open Project
function propn() {
	if [[ -n "$1" ]]
		then
			cd "${dirProjects}"/$1
		else
			cd "${dirProjects}"
	fi
}

#Setup Web Project
function prstp() {
	if [[ -n "$1" ]]
		then
			echo "Setting Up Project $1"
			propn
			if [[ ! -d $1 ]]
				then
					mkdir $1
			fi
			cd $1
			cp -R "${dirProjectWeb}"/dev .
			cp "${dirProjectWeb}"/gruntfile.js "${dirProjectWeb}"/.*rc "${dirProjectWeb}"/package.json .
			cp "${dirProjectWeb}"/TemplateX.sublime-project ./$1.sublime-project
			mkdir ./meta ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			perl -pi -w -e "s/TemplateX/"$1"/g;" ./gruntfile.js
			perl -pi -w -e "s/TemplateX/"$1"/g;" ./$1.sublime-project
			while true; do
					read -p "Do You Want to Install npm Dependencies (y/n)? " ynnpm
					case $ynnpm in
							[Yy]*)
								npm install
								break
								;;
							[Nn]*)
								break
								;;
							*)
								echo "Please Answer (y)es or (n)o"
								;;
					esac
			done
			OPTIND=1
		else
			echo "Please Enter Project Name"
	fi
}

#Setup Good-Seller Template Project
function prgsstp() {
	if [[ -n "$1" ]]
		then
			echo "Setting Up Good-Seller Template Project template$1"
			propn
			if [[ ! -d GoodSellerTemplates/template$1 ]]
				then
					mkdir GoodSellerTemplates/template$1
			fi
			cd "${dirProjects}"/GoodSellerTemplates/template$1
			cp -R "${dirProjects}"/GoodSellerTemplates/templateBase/dev .
			cp "${dirProjects}"/GoodSellerTemplates/templateBase/gruntfile.js .
			cp "${dirProjects}"/GoodSellerTemplates/templateBase/GStemplate.sublime-project ./GStemplate$1.sublime-project
			mkdir ./meta ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			perl -pi -w -e "s/GoodSellerTemplates/"GoodSellerTemplate$1"/g;" ./gruntfile.js
			perl -pi -w -e "s/GoodSellerTemplates/"GoodSellerTemplate$1"/g;" ./GStemplate$1.sublime-project
			cd ..
		else
			echo "Please Enter Template Number"
	fi
}

#Setup App Project
function apstp() {
	if [[ -n "$1" ]]
		then
			echo "Setting Up App Project $1"
			propn
			if [[ ! -d $1 ]]
				then
					mkdir $1
			fi
			cd $1
			cp -R "${dirProjectApp}"/dev .
			cp "${dirProjectApp}"/gruntfile.js "${dirProjectApp}"/.*rc "${dirProjectApp}"/package.json .
			cp "${dirProjectApp}"/AppX.sublime-project ./$1.sublime-project
			mkdir ./meta ./design ./sources
			find . -name ".DS_Store" -type f -delete
			find ./dev -type d -empty -delete
			perl -pi -w -e "s/AppX/"$1"/g;" ./gruntfile.js
			perl -pi -w -e "s/AppX/"$1"/g;" ./$1.sublime-project
			if [[ -n "$2" ]]
				then
					perl -pi -w -e "s/appx/"$2"/g;" ./gruntfile.js
				else
					perl -pi -w -e "s/appx/"$1"/g;" ./gruntfile.js
			fi
			while true; do
					read -p "Do You Want to Install npm Dependencies (y/n)? " ynnpm
					case $ynnpm in
							[Yy]*)
								npm install
								break
								;;
							[Nn]*)
								break
								;;
							*)
								echo "Please Answer (y)es or (n)o"
								;;
					esac
			done
			OPTIND=1
		else
			echo "Please Enter Project and JavaScript Package Names"
	fi
}

#Watch Current Project with Sass
function prsass() {
	if [[ -d dev ]]
		then
			compass=false
			while getopts ":c" opt; do
				case "${opt}" in
					c)
						compass=true
						;;
					\?)
						echo "Invalid Parameters"
						exit
						;;
				esac
			done
			OPTIND=1
			if $compass
				then
					sass --compass --sourcemap --style expanded --watch dev/res/sass-dev:dev/res/css-dev
				else
					sass --sourcemap --style expanded --watch dev/res/sass-dev:dev/res/css-dev
			fi
		else
			echo "Nothing to Watch / Update Project Structure"
	fi
}

#Watch Current Project with GruntJS watch-project Task
function prwtch() {
	if [[ -d dev ]]
		then
			grunt watch-project
		else
			echo "Nothing to Watch"
	fi
}

#Watch Current Project with GruntJS watch-project Task
function prgswtch() {
	template="Base"
	while getopts ":t:" opt; do
		case "${opt}" in
			t)
				template=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d template$template/dev ]]
		then
			grunt watch-project --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
		else
			echo "Nothing to Watch"
	fi
}

#Build Current Project using GruntJS by Default or Apache ANT
function prbld() {
	criticalFlag=false
	builder="grunt"
	while getopts ":ca" opt; do
		case "${opt}" in
			c)
				criticalFlag=true
				;;
			a)
				builder="ant"
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [ "$builder" == "ant" ]
		then
			ant -propertyfile $buildProperties
		else
			if $criticalFlag
				then
					grunt build-critical
				else
					grunt build
			fi
	fi
	find ./build -type d -empty -delete
}

#Build Current Good-Seller Template Project using GruntJS by Default or Apache ANT
function prgsbld() {
	criticalFlag=false
	template="Base"
	while getopts ":ct:" opt; do
		case "${opt}" in
			c)
				criticalFlag=true
				;;
			t)
				template=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if $criticalFlag
		then
			grunt build-critical --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
		else
			grunt build --gruntfile template$template/gruntfile.js --base ./ --gstemplate=template$template
	fi
	find template$template/build -type d -empty -delete
	find template$template/template -type d -empty -delete
}

#Start Local HTTP Server and Serve Current Project (/dev Directory By Default or Some Other if Specified)
function server() {
	port=8000
	dir="dev"
	while getopts ":d:p:" opt; do
		case "${opt}" in
			d)
				dir=$OPTARG
				;;
			p)
				port=$OPTARG
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if [[ -d $dir ]]
		then
			cd $dir
			open "http://localhost:${port}/"
			python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
			cd ..
		else
			echo "Nothing to Serve / Missing Directory"
	fi
}

#Start All Browsers (Current Stable Releases or Nightly Builds) With an Empty Tab or Go To Specified URL (http://localhost:8000 by Default)
function browsers() {
	nightlyFlag=false
	url="http://localhost:8000/"
	emptyFlag=false
	while getopts ":neu:" opt; do
		case "${opt}" in
			n)
				nightlyFlag=true
				;;
			u)
				url=$OPTARG
				;;
			e)
				emptyFlag=true
				;;
			\?)
				echo "Invalid Parameters"
				exit
				;;
		esac
	done
	OPTIND=1
	if $emptyFlag
		then
			if $nightlyFlag
				then
					open -a Google\ Chrome\ Canary
					open -a Opera\ Next
					# open -a WebKit
					open -a FirefoxNightly
				else
					open -a Google\ Chrome
					open -a Opera
					open -a Safari
					open -a Firefox
			fi
		else
			if $nightlyFlag
				then
					open -a Google\ Chrome\ Canary $url
					open -a Opera\ Next $url
					# open -a WebKit $url
					open -a FirefoxNightly $url
				else
					open -a Google\ Chrome $url
					open -a Opera $url
					open -a Safari $url
					open -a Firefox $url
			fi
	fi
}